#**Traffic Sign Recognition** 

##Writeup Template

###You can use this file as a template for your writeup if you want to submit it as a markdown file, but feel free to use some other method and submit a pdf if you prefer.

---

**Build a Traffic Sign Recognition Project**

The goals / steps of this project are the following:
* Load the data set (see below for links to the project data set)
* Explore, summarize and visualize the data set
* Design, train and test a model architecture
* Use the model to make predictions on new images
* Analyze the softmax probabilities of the new images
* Summarize the results with a written report


[//]: # (Image References)

[image1]: ./visualization.png "Visualization"
[image2]: ./examples/grayscale.jpg "Grayscaling"
[image3]: ./examples/random_noise.jpg "Random Noise"
[image4]: ./examples/placeholder.png "Traffic Sign 1"
[image5]: ./examples/placeholder.png "Traffic Sign 2"
[image6]: ./examples/placeholder.png "Traffic Sign 3"
[image7]: ./examples/placeholder.png "Traffic Sign 4"
[image8]: ./examples/placeholder.png "Traffic Sign 5"

## Rubric Points
###Here I will consider the [rubric points](https://review.udacity.com/#!/rubrics/481/view) individually and describe how I addressed each point in my implementation.  

---
###Writeup / README

####1. Provide a Writeup / README that includes all the rubric points and how you addressed each one. You can submit your writeup as markdown or pdf. You can use this template as a guide for writing the report. The submission includes the project code.

You're reading it! and here is a link to my [project code](https://github.com/udacity/CarND-Traffic-Sign-Classifier-Project/blob/master/Traffic_Sign_Classifier.ipynb)

###Data Set Summary & Exploration

####1. Provide a basic summary of the data set. In the code, the analysis should be done using python, numpy and/or pandas methods rather than hardcoding results manually.

I used basic python commands to calculate summary statistics of the traffic
signs data set:

* The size of training set is 34799.
* The size of the validation set is 4410.
* The size of test set is 12630.
* The shape of a traffic sign image is (32, 32, 3).
* The number of unique classes/labels in the data set is 43.

####2. Include an exploratory visualization of the dataset.

Here is an exploratory visualization of the data set. It is a bar chart showing how the data ...

![alt text][image1]

###Design and Test a Model Architecture

####1. Describe how you preprocessed the image data. What techniques were chosen and why did you choose these techniques? Consider including images showing the output of each preprocessing technique. Pre-processing refers to techniques such as converting to grayscale, normalization, etc. (OPTIONAL: As described in the "Stand Out Suggestions" part of the rubric, if you generated additional data for training, describe why you decided to generate additional data, how you generated the data, and provide example images of the additional data. Then describe the characteristics of the augmented training set like number of images in the set, number of images for each class, etc.)

Before preprocessing the data at all, I ran it through several different convolutional neural network architectures. I found that I could achive about 90% validation accuracy without any preprocessing using a "beefed-up" version of LeNet-5. Therefore I decided to try only a couple relatively simple preprocessing techniques in hopes of gaining an extra 3%-5%. I implimented two techniques.

Normalization- First I normalized the data by passing all training, validation, and test images through a function that scales all pixel values into the range [0,1]. Normaliztion can have several beneficial effects. It can help to avoid rounding errors, it can improve training speed, and it can help to avoid local minima and maxima in the error-space that would stall training. It is easy to do, so it was worth trying.

After traininmg the network I read that it is generally better to have the inputs centered around zero than to in the range from zero to one. Therefore in future attempts I would suggest trying a slightly modified algorithm that centers the data in the range [-1,1].

Augmentation- Next (but prior in the actual notebook code) I implimented a vertical flip of the images. I then concatenated the new images onto the training set and doubled the labels array. This gave double the amount of training examples. In hindsight this may not have been the best way to augment that data becuase flipping some of the signs might have changed their meanings (this is definitely true with a horizontal flip, which is why I use a vertical flip). If I were to try for futher improvements to this model, I would impliment class-specific augmentation. I would flip only the classes that are under-represented in the total number of training examples, as show in the bar chart below.

PIC of class bar chart.



#########################################################################################################
As a first step, I decided to convert the images to grayscale because ...

Here is an example of a traffic sign image before and after grayscaling.

![alt text][image2]

As a last step, I normalized the image data because ...

I decided to generate additional data because ... 

To add more data to the the data set, I used the following techniques because ... 

Here is an example of an original image and an augmented image:

![alt text][image3]

The difference between the original data set and the augmented data set is the following ... 


####2. Describe what your final model architecture looks like including model type, layers, layer sizes, connectivity, etc.) Consider including a diagram and/or table describing the final model.

My final model consisted of the following layers:

### Model Architecture
Below is a description of my model's architecture. I started from the LeNet-5 example and added complexity from there.

Layer 1: 
- Convolutional 5x5. Stride = 1. Depth = 20.
- Activation Layer: Relu.
- Maxpool Layer 2x2. Stride = 2.

Layer 2: 
- Convolutional 5x5. Stride = 1. Depth = 20.
- Activation Layer: Relu.
- Maxpool Layer 2x2. Stride = 2.

Layer 3: 
- Convolutional 5x5. Stride = 1. Depth = 20.
- Activation Layer: Relu.
- Maxpool Layer 2x2. Stride = 2.

- Flattening.

Layer 4: 
- Fully-Connected. Neurons = 120.
- Activation Layer: Relu.

Layer 5: 
- Fully-Connected. Neurons = 120.
- Activation Layer: Relu.

Layer 5:
- Output, Fully-Connected. Neurons = 43.

The weights have been initialized with a truncated normal distribution around zero, with sigma left as a hyperparameter.
 


####3. Describe how you trained your model. The discussion can include the type of optimizer, the batch size, number of epochs and any hyperparameters such as learning rate.

To train the model, I used an Adam Optimizer. This was chosen because it had already been proven effective in LeNet-5.

Hyperparameters:
EPOCHS = 100     #Train 
BATCH_SIZE = 128 #Batch size
rate = 0.001    #Learning rate
sigma = 0.001     #Weights initialization value

It was found that for such a small data set, it is better to use a small batch size. This allows for the weights to be updated more frequently than with a larger batch size.

The learning rate was modified many times during training. Eventually 0.001 was chosen as the highest rate that still achived a convergence above 93%. 


####4. Describe the approach taken for finding a solution and getting the validation set accuracy to be at least 0.93. Include in the discussion the results on the training, validation and test sets and where in the code these were calculated. Your approach may have been an iterative process, in which case, outline the steps you took to get to the final solution and why you chose those steps. Perhaps your solution involved an already well known implementation or architecture. In this case, discuss why you think the architecture is suitable for the current problem.

My final model results were:
* validation set accuracy of 93%  
* test set accuracy of 91%
* new image accuracy of 60%

If an iterative approach was chosen:
* What was the first architecture that was tried and why was it chosen?
LeNet-5 was chosen as a starting point because of the example notebook that was given.

* What were some problems with the initial architecture?
The initial architecture actually worked quite well on the original dataset. The best validation accuracy that I got with this architecture was about 92%. However in the end I expanded that size by increasing the number of neurons in each layer. This was done after I added in the flipped images. It seems that the original arcitecture was too small to handle the expanded data set. Later I added a third convolutional layer, hoping to increase the complexity of features that could be detected. I hoped that this would help the model generalize to new pictures beyond the original data set.

* How was the architecture adjusted and why was it adjusted? Typical adjustments could include choosing a different model architecture, adding or taking away layers (pooling, dropout, convolution, etc), using an activation function or changing the activation function. One common justification for adjusting an architecture would be due to overfitting or underfitting. A high accuracy on the training set but low accuracy on the validation set indicates over fitting; a low accuracy on both sets indicates under fitting.
Discussed above. Also I used pooling layers to avoid overfitting. I considered using dropout as well, but I never saw any signs of overfitting, so it seemed unessesary to add further regularization.

* Which parameters were tuned? How were they adjusted and why?
After settling on my expanded architecture, I repeatedly adjusted the batch size, learning rate, and to a lesser extent the sigma value of weight initialization.  

* What are some of the important design choices and why were they chosen? For example, why might a convolution layer work well with this problem? How might a dropout layer help with creating a successful model?

If a well known architecture was chosen:
* What architecture was chosen?
* Why did you believe it would be relevant to the traffic sign application?
* How does the final model's accuracy on the training, validation and test set provide evidence that the model is working well?
 

###Test a Model on New Images

####1. Choose five German traffic signs found on the web and provide them in the report. For each image, discuss what quality or qualities might be difficult to classify.

Here are five German traffic signs that I found on the web:

![alt text][image4] ![alt text][image5] ![alt text][image6] 
![alt text][image7] ![alt text][image8]

The first image might be difficult to classify because ...

####2. Discuss the model's predictions on these new traffic signs and compare the results to predicting on the test set. At a minimum, discuss what the predictions were, the accuracy on these new predictions, and compare the accuracy to the accuracy on the test set (OPTIONAL: Discuss the results in more detail as described in the "Stand Out Suggestions" part of the rubric).

Here are the results of the prediction:

| Image			        |     Prediction	        					| 
|:---------------------:|:---------------------------------------------:| 
| Stop Sign      		| Stop sign   									| 
| U-turn     			| U-turn 										|
| Yield					| Yield											|
| 100 km/h	      		| Bumpy Road					 				|
| Slippery Road			| Slippery Road      							|


The model was able to correctly guess 4 of the 5 traffic signs, which gives an accuracy of 80%. This compares favorably to the accuracy on the test set of ...

####3. Describe how certain the model is when predicting on each of the five new images by looking at the softmax probabilities for each prediction. Provide the top 5 softmax probabilities for each image along with the sign type of each probability. (OPTIONAL: as described in the "Stand Out Suggestions" part of the rubric, visualizations can also be provided such as bar charts)

The code for making predictions on my final model is located in the 11th cell of the Ipython notebook.

For the first image, the model is relatively sure that this is a stop sign (probability of 0.6), and the image does contain a stop sign. The top five soft max probabilities were

| Probability         	|     Prediction	        					| 
|:---------------------:|:---------------------------------------------:| 
| .60         			| Stop sign   									| 
| .20     				| U-turn 										|
| .05					| Yield											|
| .04	      			| Bumpy Road					 				|
| .01				    | Slippery Road      							|


For the second image ... 

### (Optional) Visualizing the Neural Network (See Step 4 of the Ipython notebook for more details)
####1. Discuss the visual output of your trained network's feature maps. What characteristics did the neural network use to make classifications?



